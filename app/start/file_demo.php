<?phpnamespace app\Start;class FileDemo {	private $destDirPath;	private $destFileName;	private $fileContents;		private $errorMessage;		private $fileHandle;	public function setValue($name, $value){		$this->$name=$value;	}		public function getValue($name){		return $this->$name;	}		private function _checkFileExists(){		$filePath=$this->destDirPath.DIRECTORY_SEPARATOR.$this->destFileName;		return file_exists($filePath);	}		private function _checkDirExists(){		return is_dir($this->destDirPath);	}		public function getFileName(){		return $this->destFileName;	}		public function getFilePath(){		return $this->destDirPath.DIRECTORY_SEPARATOR.$this->destFileName;	}		/** 	 * Write case validates parameters and saves data	 *	 */	public function putData(){			try {			if (empty($this->fileContents)){				throw new \Exception("can't write empty string in fileDemo::putData");			}						if (!$this->_checkDirExists()){				throw new \Exception("invalid directory path supplied to fileDemo::putData");			}						$this->fileHandle=fopen($this->getFilePath(), 'wb');			fwrite($this->fileHandle, $this->fileContents);			fclose($this->fileHandle);					if (!$this->_checkFileExists()){				throw new \Exception("could not create file (probably permissions) in fileDemo::putData");			}						return true;		}				catch (\Exception $e){			$this->errorMessage=$e->getMessage();			return false;		}	}		/** 	 * Read case validates parameters and gets data	 *	 * @author  TQ White II <tq@tqwhite.com>	 *	 */	public function getData(){			try {						if (!$this->_checkFileExists()){				throw new \Exception("file ({$this->getFilePath()}) does not exist fileDemo::getData");			}						$size=filesize($this->getFilePath());						$this->fileHandle=fopen($this->getFilePath(), 'rb');			$this->fileContents=fread($this->fileHandle, $size);			fclose($this->fileHandle);					if ($this->fileContents===false){				throw new \Exception("could not read file ({$this->getFilePath()}) in fileDemo::getData");			}						return true;		}				catch (\Exception $e){			$this->errorMessage=$e->getMessage();			return false;		}	}}//end of class