<?php$ds=DIRECTORY_SEPARATOR;require_once("..{$ds}framework{$ds}configs{$ds}appConfig.php");if (SYSTEM_TYPE=='development'){require_once("..{$ds}framework{$ds}configs{$ds}host_ftp_config.php");}function getTools(){	$ds=DIRECTORY_SEPARATOR;	require_once("tools{$ds}dump.php");	require_once("tools{$ds}contains.php");	require_once("tools{$ds}processTemplateArray.php");}function camelCaseToUnderscore($inString){	$inString=preg_replace('/^([A-Z])/e', 'strtolower("\1")', $inString);	$inString=preg_replace('/([A-Z])/', '_\1', $inString);	$outString=strtolower($inString);	return $outString;}function dispatchFirst($pathString){	$ds=DS;	$rootDirPath=ROOT;		$pathArray=explode($ds, $pathString);		$controller=array_shift($pathArray);		$controller="{$controller}Controller";		$provisionalParameterArray=$pathArray;	$action=array_shift($pathArray);	$parameterArray=$pathArray; //whatever is left is parameters	$controllerObj=new $controller;	if (empty($action)){$action='index';}		if (method_exists($controllerObj, $action)){		call_user_func_array(array($controllerObj,$action),$parameterArray);	}	else{		if (method_exists($controllerObj, 'getUnknownActionHandlerName')){			$action=$controllerObj->getUnknownActionHandlerName();			call_user_func_array(array($controllerObj,$action),$provisionalParameterArray);		}		else{			exit("make it so that unknown action goes to the front page or something");		}	}}function __autoload($className){	$ds=DIRECTORY_SEPARATOR;	$classRootPath=CLASSROOT;		$fileName=$className;		$fileName=camelCaseToUnderscore($fileName);		$classDirName='classes';		//maybe it's a controller	$subDirName='controllers';	$trialFilePath="$classRootPath$ds$subDirName$ds$fileName.php";	if (file_exists($trialFilePath)){		require_once($trialFilePath);		return;	}		//maybe it's a modell	$subDirName='models';	$trialFilePath="$classRootPath$ds$subDirName$ds$fileName.php";	if (file_exists($trialFilePath)){		require_once($trialFilePath);		return;	}		//maybe it's a service	$subDirName='services';	$trialFilePath="$classRootPath$ds$subDirName$ds$fileName.php";	if (file_exists($trialFilePath)){		require_once($trialFilePath);		return;	}		//maybe its a base class or something	$subDirName='';	$trialFilePath="$classRootPath$ds$subDirName$ds$fileName.php";	if (file_exists($trialFilePath)){		require_once($trialFilePath);		return;	}		exit("FATAL ERROR: Class $className cannot be found<BR>");	}getTools();		switch (SYSTEM_TYPE){	case 'development':		break;	case 'production':	default:		//some kind of setup some day for production systems		break;}